var documenterSearchIndex = {"docs":
[{"location":"#MPIKernelReco.jl-Documentation","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"","category":"section"},{"location":"#ConcentrationFunctions.jl","page":"MPIKernelReco.jl Documentation","title":"ConcentrationFunctions.jl","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"concentration","category":"page"},{"location":"#MPIKernelReco.concentration","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.concentration","text":"concentration(x1_interpol, x2_interpol, x3_interpol, x1_eval, x2_eval, x3_eval, ALPHA, beta, ::Type{ReconstructionKernel}, epsilon_reco, ::Type{InterpolationKernel}, epsilon_interpol)\n\nCompute the concentration given interpolation points, evaluation points, interpolation coefficients, and reconstruction parameters.\n\nArguments\n\nx1_interpol::Vector{Float64}: Vector of x-coordinates for interpolation points.\nx2_interpol::Vector{Float64}: Vector of y-coordinates for interpolation points.\nx3_interpol::Vector{Float64}: Vector of z-coordinates for interpolation points.\nx1_eval::Vector{Float64}: Vector of x-coordinates for evaluation points.\nx2_eval::Vector{Float64}: Vector of y-coordinates for evaluation points.\nx3_eval::Vector{Float64}: Vector of z-coordinates for evaluation points.\nALPHA::Matrix{Float64}: n  m Matrix containing the interpolation coefficients of the system matrices, where n is the number of grid points and m is the number of forward operators.\nbeta::Vector{Float64}: Vector of length m, containing the computed coefficients for the basis functions in the kernel-based reconstruction.\n::Type{ReconstructionKernel}: The type of kernel function to be used for reconstruction (k^textreco).\nepsilon_reco::Float64: Shape parameter for the reconstruction kernel.\n::Type{InterpolationKernel}: The type of kernel function to be used for interpolation (k^textinterpol).\nepsilon_interpol::Float64: Shape parameter for the interpolation kernel.\n\nReturns\n\nconcentration::Vector{Float64}: The computed concentration values at the evaluation points.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"computeConvolutionalKernel","category":"page"},{"location":"#MPIKernelReco.computeConvolutionalKernel","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.computeConvolutionalKernel","text":"computeConvolutionalKernel(x_interpol, x_eval, ::Type{ReconstructionKernel}, epsilon_reco::Float64, ::Type{InterpolationKernel}, epsilon_interpol::Float64)\n\nCompute the convolutional kernel matrix given interpolation and evaluation points, and kernel parameters.\n\nArguments\n\nx_interpol::Vector{Vector{Float64}}: Nested vector where each sub-vector contains coordinates for interpolation points.\nx_eval::Vector{Vector{Float64}}: Nested vector where each sub-vector contains coordinates for evaluation points.\n::Type{ReconstructionKernel}: The type of kernel function to be used for reconstruction (k^textreco).\nepsilon_reco::Float64: Shape parameter for the reconstruction kernel.\n::Type{InterpolationKernel}: The type of kernel function to be used for interpolation (k^textinterpol).\nepsilon_interpol::Float64: Shape parameter for the interpolation kernel.\n\nReturns\n\nK_conv::Matrix{Float64}: The computed convolutional kernel matrix.\n\n\n\n\n\ncomputeConvolutionalKernel(x1_interpol::Vector{Float64}, x2_interpol::Vector{Float64}, x3_interpol::Vector{Float64}, x1_eval::Vector{Float64}, x2_eval::Vector{Float64}, x3_eval::Vector{Float64}, ::Type{ReconstructionKernel}, epsilon_reco::Float64, ::Type{InterpolationKernel}, epsilon_interpol::Float64)\n\nCompute the convolutional kernel matrix for 3D interpolation and evaluation points with separable kernels.\n\nArguments\n\nx1_interpol::Vector{Float64}: Vector of x-coordinates for interpolation points.\nx2_interpol::Vector{Float64}: Vector of y-coordinates for interpolation points.\nx3_interpol::Vector{Float64}: Vector of z-coordinates for interpolation points.\nx1_eval::Vector{Float64}: Vector of x-coordinates for evaluation points.\nx2_eval::Vector{Float64}: Vector of y-coordinates for evaluation points.\nx3_eval::Vector{Float64}: Vector of z-coordinates for evaluation points.\n::Type{ReconstructionKernel}: The type of kernel function to be used for reconstruction (k^textreco).\nepsilon_reco::Float64: Shape parameter for the reconstruction kernel.\n::Type{InterpolationKernel}: The type of kernel function to be used for interpolation (k^textinterpol).\nepsilon_interpol::Float64: Shape parameter for the interpolation kernel.\n\nReturns\n\nK_conv::Matrix{Float64}: The computed convolutional kernel matrix for the 3D case.\n\n\n\n\n\n","category":"function"},{"location":"#KernelInterpolation.jl","page":"MPIKernelReco.jl Documentation","title":"KernelInterpolation.jl","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"getKernelInterpolationCoefficients","category":"page"},{"location":"#MPIKernelReco.getKernelInterpolationCoefficients","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.getKernelInterpolationCoefficients","text":"getKernelInterpolationCoefficients(f, x, ::Type{KernelType})\n\nInterpolates a function f mathbbR^d to mathbbR, whose values are known in interpolation points x_1 ldots x_n in mathbbR^d by applying a kernel-based approach. (f_1 ldots f_n) = (f(x_1) ldots f(x_n)). \nThe interpolant has the form s(x) = sum_i = 1^n beta_i K(x x_i). \nK(xy) mathbbR^d times mathbbR^d to mathbbR is a symmetric, positive-definite kernel function. \nbeta_1 ldots beta_n in mathbbR are coefficients. \nThe interpolant satisfies s(x_i) = f_i For all i = 1 ldots n.\n\nArguments\n\nf: Vector of length n containing the values of f_1  f_n\nx: Vector of length n containing the interpolation points x_1  x_n\n::Type{KernelType}: The type of kernel function to be used for computing the kernel values. It should be a subtype of AbstractKernel.\n\nReturns\n\nbeta: Vector of length n containing the coefficients corresponding to the kernel centered at the respective interpolation point x_i\n\n\n\n\n\n\"     getKernelInterpolationCoefficients(f::Vector{Float64}, A::Cholesky{Float64, Matrix{Float64}}) -> Vector{Float64}\n\nSolve for the interpolation coefficients using the Cholesky factor of the kernel interpolation matrix.\n\nArguments\n\nf::Vector{Float64}: A vector containing the function values at the interpolation points.\nA::Cholesky{Float64, Matrix{Float64}}: The Cholesky factorization of the kernel interpolation matrix.\n\nReturns\n\ncoefficients::Vector{Float64}: A vector of interpolation coefficients.\n\nDetails\n\nThis function computes the interpolation coefficients by solving the linear system A * coefficients = f, where A is the Cholesky factor of the kernel interpolation matrix. The Cholesky factorization A is used to efficiently solve the system.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"assembleKernelInterpolationMatrix","category":"page"},{"location":"#MPIKernelReco.assembleKernelInterpolationMatrix","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.assembleKernelInterpolationMatrix","text":"assembleKernelInterpolationMatrix(x::Vector{T}, ::Type{K}) where {T, K<:AbstractKernel}\n\nAssemble an interpolation matrix using a specified kernel function.\n\nThis function constructs a matrix where each entry A[i, j] represents the kernel value between the i-th and j-th points in the input vector x, using the specified kernel function K.\n\nArguments\n\nx::Tuple{Vararg{Vector{T}}}: A tuple containing an abitrary number of Vectors of type T. Each point should be represented as a vector containing the coordinates of the point.\n::Type{KernelType}: The type of kernel function to be used for computing the kernel values. It should be a subtype of AbstractKernel.\n\nReturns\n\nA matrix A of size n x n, where n is the length of vector x, containing the kernel values between each pair of points in x.\n\nExample\n\nx = ([1.0, 2.0, 0.1], [3.0, 4.0, 0.2], [5.0, 6.0, 0.3])  # Example points\nA = assembleKernelInterpolationMatrix(x, ExponentialKernel)\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"kernelInterpolant","category":"page"},{"location":"#MPIKernelReco.kernelInterpolant","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.kernelInterpolant","text":"kernelInterpolant(evaluationPoint, interpolationPoints, coefficients, ::Type{KernelType})\n\ncomputes the interpolant at a given point textevaluationPoint = x using a Kernel function with nodes textinterpolationPoints. The interpolant is of the form ``s(x) = \\sum{i = 1}^n \betai K(x, x_i)\n\nArguments\n\nevalutationPoint: Point of evaluation x\ninterpolationPoints: Vector containing the interpolation points (x_1 ldots x_n)\ncoefficients: Vector of coefficients beta_1 ldots beta_n\n::Type{KernelType}: Type hint for the kernel function K.\n\nReturns\n\nThe value of the interpolant at evaluationPoint x.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"choleskyDecomposeInterpolationMatrix","category":"page"},{"location":"#MPIKernelReco.choleskyDecomposeInterpolationMatrix","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.choleskyDecomposeInterpolationMatrix","text":"choleskyDecomposeInterpolationMatrix(x::Vector{Vector{Float64}}, epsilon::Float64, ::Type{KernelType}) where {KernelType<:AbstractKernel}\n\nPerform Cholesky decomposition on the interpolation matrix constructed from the provided points and kernel.\n\nArguments\n\nx::Vector{Vector{Float64}}: Nested vector where each sub-vector contains coordinates of the interpolation points.\nepsilon::Float64: Shape parameter for the kernel function.\n::Type{KernelType}: The type of kernel function to be used for constructing the interpolation matrix.\n\nReturns\n\nA::Cholesky{Float64, Matrix{Float64}}: The Cholesky factor of the adjusted interpolation matrix.\n\nDetails\n\nThe function first assembles the kernel interpolation matrix using the provided points and kernel type. It then calculates the smallest eigenvalue of this matrix. If the smallest eigenvalue is negative or smaller than a certain threshold, it adjusts the matrix by adding twice the smallest eigenvalue to its diagonal. This adjustment ensures that the matrix is positive definite before performing the Cholesky decomposition.\n\n\n\n\n\n","category":"function"},{"location":"#KernelReconstruction.jl","page":"MPIKernelReco.jl Documentation","title":"KernelReconstruction.jl","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"mainKernelReco","category":"page"},{"location":"#MPIKernelReco.mainKernelReco","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.mainKernelReco","text":"mainKernelReco(patch::Int, numPatches::Int, filenameSM::String, filenameMeas::String,\n               ::Type{ReconstructionKernel} = ExponentialKernel, epsilon_reco::Float64 = 50.0,\n               ::Type{InterpolationKernel} = ExponentialKernel, epsilon_interpol::Float64 = 50.0)\n\nTriggers the kernel interpolation and starts the following processes:\n\nReading the system matrix and measurements.\nInterpolating the system functions.\nAssembling the reconstruction matrix.\nPerforming the reconstruction.\nEvaluating and visualizing the concentration.\n\nArguments\n\npatch::Int: Number that specifies the patch that should be reconstructed.\nnumPatches::Int: Total amount of patches.\nfilenameSM::String: Path to the system matrix .mdf file.\nfilenameMeas::String: Path to the measurement results .mdf file.\nReconstructionKernel::Type{<:AbstractKernel}: The type of kernel to use for reconstruction (default: ExponentialKernel).\nepsilon_reco::Float64: Parameter for the reconstruction kernel (default: 50.0).\nInterpolationKernel::Type{<:AbstractKernel}: The type of kernel to use for interpolation (default: ExponentialKernel).\nepsilon_interpol::Float64: Parameter for the interpolation kernel (default: 50.0).\n\nReturns\n\nA tuple containing:\n\nc: The concentration array.\ninterpolation_coefficients: The coefficients required for interpolation.\nA: The reconstruction matrix.\n\n\n\n\n\n","category":"function"},{"location":"#Kernels.jl","page":"MPIKernelReco.jl Documentation","title":"Kernels.jl","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"kernel","category":"page"},{"location":"#MPIKernelReco.kernel","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.kernel","text":"kernel(x, y, k::Type{ExponentialKernel})\n\nExponential kernel function\n\nArguments\n\nx: First argument to insert into the kernel function\ny: Second argument to insert into the kernel function k\nk::Type{ExponentialKernel}: Type hint for dispatching to the  ExponentialKernel method.\n\nReturns\n\nThe kernel value between x and y using the Exponential Kernel. K(xy) = exp(-x - y^2)\n\n\n\n\n\nkernel(x, y, k::Type{MultiquadricKernel})\n\nMultiquadric kernel function\n\nArguments\n\nx: First argument to insert into the kernel function\ny: Second argument to insert into the kernel function k\nk::Type{MultiquadricKernel}: Type hint for dispatching to the MultiquadricKernel method.\n\nReturns\n\nThe kernel value between x and y using the Multiquadrtic Kernel. K(xy) = sqrt(1 + (varepsilon x - y )^2)\n\n\n\n\n\nkernel(x, y, k::Type{InverseMultiquadricKernel})\n\nInverse Multiquadric kernel function\n\nArguments\n\nx: First argument to insert into the kernel function\ny: Second argument to insert into the kernel function k\nk::Type{InverseMultiquadricKernel}: Type hint for dispatching to the InverseMultiquadricKernel method.\n\nReturns\n\nThe kernel value between x and y using the Inverse Multiquadrtic Kernel. K(xy) = 1  sqrt(1 + (varepsilon x - y )^2)\n\n\n\n\n\nkernel(x, y, k::Type{Wendland0Kernel})\n\nWendland kernel of order 0.\n\nArguments\n\nx: First argument to insert into the kernel function\ny: Second argument to insert into the kernel function k\nk::Type{Wendland0Kernel}: Type hint for dispatching to the Wendland0Kernel method.\n\nReturns\n\nThe kernel value between x and y using the Wendland Kernel of order 0. K(xy) = max(0 1 - x - y )\n\n\n\n\n\n","category":"function"},{"location":"#readWriteHDF5.jl","page":"MPIKernelReco.jl Documentation","title":"readWriteHDF5.jl","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"writeInterpolationCoefficients","category":"page"},{"location":"#MPIKernelReco.writeInterpolationCoefficients","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.writeInterpolationCoefficients","text":"writeInterpolationCoefficients(B::Array, ::Type{InterpolationKernel}, epsilon::Float64, interpolation_grid)\n\nWrites the interpolation coefficients and associated metadata to an HDF5 file. The file is named with the current date and stored in the ../data directory.\n\nArguments\n\nB::Array: The interpolation coefficients to be written.\nInterpolationKernel::Type{<:AbstractKernel}: The type of interpolation kernel used.\nepsilon::Float64: The shape parameter for the interpolation kernel.\ninterpolation_grid: The grid points used for interpolation (currently not written to file).\n\n\n\n\n\n","category":"function"},{"location":"#ReconstructionMatrix","page":"MPIKernelReco.jl Documentation","title":"ReconstructionMatrix","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"assembleReconstructionMatrix","category":"page"},{"location":"#MPIKernelReco.assembleReconstructionMatrix","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.assembleReconstructionMatrix","text":"assembleReconstructionMatrix(ALPHA::Matrix{Float64}, x1::Vector{Float64}, x2::Vector{Float64}, x3::Vector{Float64},\n                             ::Type{ReconstructionKernel}, epsilon_reco::Float64,\n                             ::Type{InterpolationKernel}, epsilon_interpol::Float64)\n                             -> Matrix{Float64}\n\nAssembles the reconstruction matrix using the interpolation and reconstruction kernels.\n\nArguments\n\nALPHA::Matrix{Float64}: The computed interpolation coefficients matrix.\nx1::Vector{Float64}: The x-coordinates for the grid points.\nx2::Vector{Float64}: The y-coordinates for the grid points.\nx3::Vector{Float64}: The z-coordinates for the grid points.\nReconstructionKernel::Type{<:AbstractKernel}: The type of kernel used for reconstruction.\nepsilon_reco::Float64: The shape parameter for the reconstruction kernel.\nInterpolationKernel::Type{<:AbstractKernel}: The type of kernel used for interpolation.\nepsilon_interpol::Float64: The shape parameter for the interpolation kernel.\n\nReturns\n\nMatrix{Float64}: The assembled reconstruction matrix.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"computeConvolvedConvolutionalKernel","category":"page"},{"location":"#MPIKernelReco.computeConvolvedConvolutionalKernel","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.computeConvolvedConvolutionalKernel","text":"computeConvolvedConvolutionalKernel(xi, xj, reconstructionKernel, interpolationKernel)\n\ncomputes the integral k_ij = int_-11^3 int_-11^3 k^textreco(x x) k^textinterpol(xx_j) k^textinterpol(xx_i) dx dx This integral is needed in the computation of the reconstruction matrix entries.\n\nArguments\n\nxi: x_i representing a point in space, in particular an interpolation point of the system functions.\nxj: x_j representing a point in space, in particular an interpolation point of the system functions.\n::Type{ReconstructionKernel}: The type of kernel function to be used for k^textreco\nepsilon_reco: Shape parameter for the reconstruction kernel\n::Type{InterpolationKernel}: The type of kernel function to be used for k^textinterpol\nepsilon_interpol: Shape parameter for the interpolation kernel\n\nReturns\n\nk_{ij}: The value of the integral\n\n\n\n\n\ncomputeConvolvedConvolutionalKernel(x::Vector{Vector{Float64}}, ::Type{ReconstructionKernel}, epsilon_reco, ::Type{InterpolationKernel}, epsilon_interpol)\n\ncomputes the integral k_ij = int_-11^3 int_-11^3 k^textreco(x x) k^textinterpol(xx_j) k^textinterpol(xx_i) dx dx for all given x = (x_1 ldots x_n) subset mathbbR^3 This integral is needed in the computation of the reconstruction matrix entries.\n\nArguments\n\nx::Vector{Vector{Float64}}: x = (x_1 ldots x_n) subset mathbbR^3 points in which the integral is to be evaluated\n::Type{ReconstructionKernel}: The type of kernel function to be used for k^textreco\nepsilon_reco: Shape parameter for the reconstruction kernel\n::Type{InterpolationKernel}: The type of kernel function to be used for k^textinterpol\nepsilon_interpol: Shape parameter for the interpolation kernel\n\nReturns\n\n\n\n\n\ncomputeConvolvedConvolutionalKernel(x::Vector{Float64}, ::Type{ReconstructionKernel}, epsilon_reco, ::Type{InterpolationKernel}, epsilon_interpol)\n\ncomputes the integral k_ij = int_-11^3 int_-11^3 k^textreco(x x) k^textinterpol(xx_j) k^textinterpol(xx_i) dx dx for all given x = (x_1 ldots x_n) subset mathbbR^3 This integral is needed in the computation of the reconstruction matrix entries.\n\nArguments\n\nx::Vector{Float64}: x = (x_1 ldots x_n) subset mathbbR points in which the integral is to be evaluated\n::Type{ReconstructionKernel}: The type of kernel function to be used for k^textreco\nepsilon_reco: Shape parameter for the reconstruction kernel\n::Type{InterpolationKernel}: The type of kernel function to be used for k^textinterpol\nepsilon_interpol: Shape parameter for the interpolation kernel\n\nReturns\n\n\n\n\n\nfunction computeConvolvedConvolutionalKernel(x1::Vector{Float64}, x2::Vector{Float64}, x3::Vector{Float64}, ::Type{ReconstructionKernel}, epsilon_reco::Float64, ::Type{InterpolationKernel}, epsilon_interpol::Float64) where {ReconstructionKernel<:AbstractSeperableKernel, InterpolationKernel<:AbstractSeperableKernel}\n\ncomputes the integral\n\n\n\n\n\ncomputeConvolvedConvolutionalKernel(x, ::Type{Wendland0Kernel}, epsilon_reco::Float64, ::Type{Wendland0Kernel}, epsilon_interpol::Float64)\n\ncomputes the integral k_ij = int_-11^3 int_-11^3 k^textreco(x x) k^textinterpol(xx_j) k^textinterpol(xx_i) dx dx for all given x = (x_1 ldots x_n) subset mathbbR^3, where k^textreco (xy) = k^textinterpol(xy) = max(0 1 - x - y ) is the Wendland Kernel.\n\n\n\n\n\n","category":"function"},{"location":"#Visualization.jl","page":"MPIKernelReco.jl Documentation","title":"Visualization.jl","text":"","category":"section"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"heatmapPlotSystemFunction","category":"page"},{"location":"#MPIKernelReco.heatmapPlotSystemFunction","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.heatmapPlotSystemFunction","text":"heatmapPlotSystemFunction(values::Vector{ComplexF32}, patch::Int64 = 10) -> Plots.Plot\n\nGenerates a plot with heatmaps of the real and imaginary parts of the system function for the specified patch.\n\nThis function creates a new plot and then calls heatmapPlotSystemFunction! to add the heatmaps to the plot.\n\nArguments\n\nvalues::Vector{ComplexF32}: A vector of complex system function values that will be reshaped into a 3D array with dimensions (19, 19, 19).\npatch::Int64: The patch index for which the system function should be visualized (default: 10).\n\nReturns\n\nPlots.Plot: The generated plot object with the heatmaps.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"surfacePlotSystemFunction","category":"page"},{"location":"#MPIKernelReco.surfacePlotSystemFunction","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.surfacePlotSystemFunction","text":"surfacePlotSystemFunction(values::Vector{ComplexF32}, patch::Int64 = 10) -> Plots.Plot\n\nGenerates a plot with surface plots of the real and imaginary parts of the system function for the specified patch.\n\nThis function creates a new plot and then calls surfacePlotSystemFunction! to add the surface plots to the plot.\n\nArguments\n\nvalues::Vector{ComplexF32}: A vector of complex system function values that will be reshaped into a 3D array with dimensions (19, 19, 19).\npatch::Int64: The patch index for which the system function should be visualized (default: 10).\n\nReturns\n\nPlots.Plot: The generated plot object with the surface plots.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"surfacePlotInterpolatedSystemFunction","category":"page"},{"location":"#MPIKernelReco.surfacePlotInterpolatedSystemFunction","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.surfacePlotInterpolatedSystemFunction","text":"surfacePlotInterpolatedSystemFunction(interpolation_grid::Array, coefficients::Array,\n                                      ::Type{InterpolationKernel}, epsilon::Float64, patch::Int64)\n\nGenerates a plot with a surface plot of the interpolated system function for the specified patch.\n\nThis function creates a new plot and then calls surfacePlotInterpolatedSystemFunction! to add the surface plot to the plot.\n\nArguments\n\ninterpolation_grid::Array: The grid points used for interpolation.\ncoefficients::Array: The coefficients required for interpolation.\nInterpolationKernel::Type{<:AbstractKernel}: The type of kernel used for interpolation.\nepsilon::Float64: The shape parameter for the interpolation kernel.\npatch::Int64: The patch index for which the system function should be visualized.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"heatmapPlotInterpolatedSystemFunction","category":"page"},{"location":"#MPIKernelReco.heatmapPlotInterpolatedSystemFunction","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.heatmapPlotInterpolatedSystemFunction","text":"heatmapPlotInterpolatedSystemFunction(interpolation_grid::Array, coefficients::Array,\n                                      ::Type{InterpolationKernel}, epsilon::Float64, patch::Int64)\n                                      where {InterpolationKernel<:AbstractKernel}\n\nGenerates a plot with a heatmap of the interpolated system function for the specified patch.\n\nThis function creates a new plot and then calls heatmapPlotInterpolatedSystemFunction! to add the heatmap to the plot.\n\nArguments\n\ninterpolation_grid::Array: The grid points used for interpolation.\ncoefficients::Array: The coefficients required for interpolation.\nInterpolationKernel::Type{<:AbstractKernel}: The type of kernel used for interpolation.\nepsilon::Float64: The shape parameter for the interpolation kernel.\npatch::Int64: The patch index for which the system function should be visualized.\n\nReturns\n\nPlots.Plot: The generated plot object with the heatmap.\n\n\n\n\n\n","category":"function"},{"location":"","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.jl Documentation","text":"compareInterpolation","category":"page"},{"location":"#MPIKernelReco.compareInterpolation","page":"MPIKernelReco.jl Documentation","title":"MPIKernelReco.compareInterpolation","text":"compareInterpolation(values::Vector{ComplexF32}, interpolation_grid::Array, coefficients::Array,\n                     ::Type{InterpolationKernel}, epsilon::Float64, patch::Int64)\n                     where {InterpolationKernel<:AbstractKernel}\n\nGenerates a comparison plot that includes heatmaps and surface plots of the actual system function and its interpolated version for the specified patch.\n\nThis function creates subplots to visualize both the actual and interpolated system function using heatmaps and surface plots.\n\nArguments\n\nvalues::Vector{ComplexF32}: A vector of complex system function values that will be reshaped into a 3D array.\ninterpolation_grid::Array: The grid points used for interpolation.\ncoefficients::Array: The coefficients required for interpolation.\nInterpolationKernel::Type{<:AbstractKernel}: The type of kernel used for interpolation.\nepsilon::Float64: The shape parameter for the interpolation kernel.\npatch::Int64: The patch index for which the system function should be visualized.\n\n\n\n\n\n","category":"function"}]
}
